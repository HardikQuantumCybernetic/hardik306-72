// Utility functions for downloading files
import jsPDF from 'jspdf';

export const downloadPDF = (content: string, filename: string) => {
  const doc = new jsPDF();
  
  // Split content into lines to fit within PDF page width
  const lines = content.split('\n');
  let yPosition = 20;
  
  lines.forEach((line) => {
    if (yPosition > 280) { // Start new page if approaching bottom
      doc.addPage();
      yPosition = 20;
    }
    doc.text(line, 10, yPosition);
    yPosition += 8;
  });
  
  doc.save(`${filename}.pdf`);
};

export const downloadCSV = (data: any[], filename: string) => {
  if (data.length === 0) return;
  
  const headers = Object.keys(data[0]);
  const csvContent = [
    headers.join(','),
    ...data.map(row => headers.map(header => 
      typeof row[header] === 'string' && row[header].includes(',') 
        ? `"${row[header]}"` 
        : row[header]
    ).join(','))
  ].join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `${filename}.csv`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const downloadExcel = (data: any[], filename: string) => {
  // For Excel functionality, you would typically use a library like xlsx
  // For now, we'll download as CSV with .xlsx extension
  if (data.length === 0) return;
  
  const headers = Object.keys(data[0]);
  const csvContent = [
    headers.join('\t'),
    ...data.map(row => headers.map(header => row[header]).join('\t'))
  ].join('\n');
  
  const blob = new Blob([csvContent], { type: 'application/vnd.ms-excel' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `${filename}.xlsx`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const downloadJSON = (data: any, filename: string) => {
  const jsonContent = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonContent], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `${filename}.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const downloadFile = (url: string, filename: string) => {
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// Generate mock CV/Resume content
export const generatePatientCV = (patient: any) => {
  const cvContent = `
PATIENT MEDICAL RECORD CV
========================

Personal Information:
Name: ${patient.name}
Date of Birth: ${patient.dateOfBirth}
Email: ${patient.email}
Phone: ${patient.phone}
Address: ${patient.address}
Insurance: ${patient.insurance}

Medical History:
- Last Visit: ${patient.lastVisit}
- Next Appointment: ${patient.nextAppointment || 'Not scheduled'}
- Status: ${patient.status}
- Patient ID: ${patient.id}

Treatment History:
- Regular Cleanings
- Dental Examinations
- Preventive Care

Notes:
Patient maintains good oral hygiene and follows recommended treatment plans.

Generated on: ${new Date().toLocaleDateString()}
  `;
  
  return cvContent;
};

// Generate comprehensive report PDF content
export const generateReportPDF = (reportType: string, data: any) => {
  const reportContent = `
${reportType.toUpperCase()} REPORT
${'='.repeat(reportType.length + 7)}

Generated on: ${new Date().toLocaleDateString()}
Report Period: ${new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toLocaleDateString()} - ${new Date().toLocaleDateString()}

Summary:
${JSON.stringify(data, null, 2)}

This is a comprehensive ${reportType.toLowerCase()} report generated by the dental practice management system.

---
Report generated by Dental Practice Management System
  `;
  
  return reportContent;
};